package ConceptProgramLangHomework3;

public class MainGraph {

	double [][] paths;
	int length;
	
	public MainGraph(int dimensions) {
		paths = new double[dimensions][dimensions];
		for(int i=0; i<dimensions; i++) {
			for(int j=0; j<dimensions; j++) {
				paths[i][j] = 0;
			}
		}
		this.length = dimensions;
	}
	
	public void addEdge(int a, int b, double len) {
		
		if(a>=0 && a<length && b>=0 && b<length) {
			paths[a][b] = len;
		}
	}
	
	public boolean path(int a, int b) {
		if(a>=0 && a<length && b>=0 && b<length) {
			if(paths[a][b] > 0)
				return true;
			else
				return false;
		}else
			return false;
	}
	
	public boolean path(int a, int b, double len) {
		if(a>=0 && a<length && b>=0 && b<length) {
			if(paths[a][b] == len)
				return true;
			else
				return false;
		}else
			return false;
	}
	
	public boolean path(int a, int b, double len, int []nodes) {
		if(a<0 || a>=length || b<0 || b>=length) {
			return false;
		}
		for(int i=0; i<nodes.length; i++)
			if(nodes[i]<0 || nodes[i]>=length) return false;
		double totalLen = 0.0;
		
		for(int i=0; i<nodes.length; i++) {
			if(paths[a][i] > 0) {
				totalLen += paths[a][i];
				if(i == nodes.length-1) {
					
					if(paths[i][b] > 0) {
						
						totalLen += paths[i][b];
						if(totalLen == len)
							return true;
						else
							return false;
						
					}else return false;
				}
				
			}else return false;
		}
		return false;
	}
	
	public String toString() {
		String s = "nodes\n 0 ..... " + (this.length-1) + "\n";
		for(int i=0; i<length; i++) {
			s = s + "(" + i + ")|  ";
			for(int j=0; j<length; j++) {
				s = s + paths[i][j] + " | ";
			}
			s = s + "\n";
		}
		
		return s;
	}
	
	public static void main(String []args) {
		MainGraph g = new MainGraph(4);
		g.addEdge(1, 0, 2);
		g.addEdge(1, 1, 1);
		g.addEdge(1, 2, 1);
		g.addEdge(1, 2, 1);
		
		
		g.addEdge(2, 3, 1);
		g.addEdge(3, 6, 1);
		g.addEdge(4, 5, 1);
		g.addEdge(5, 6, 1);
		int []nodes = {4,5};
		System.out.println(g.path(0, 1));
		System.out.println(g.path(0, 1, 1));
		System.out.println(g.path(1, 3, 1, nodes));
		System.out.println(g.toString());
	}
	
	
}
